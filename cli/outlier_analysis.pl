#!/usr/bin/perl

use strict;

# this script reads the outlier csv and text files and outputs ShoultPaint.swift

my $airplane_dir = "outlier_data/airplanes";
my $non_airplane_dir = "outlier_data/non_airplanes";

my $airplane_scores = process_csv_dir($airplane_dir);
my $non_airplane_scores = process_csv_dir($non_airplane_dir);

my $histogram_size = 100;	# XXX expose this

my ($airplanes_keys_over_lines_histogram, $airplanes_keys_over_lines_step_size) =
  make_histogram($histogram_size,
		 $airplane_scores->{min_keys_over_lines},
		 $airplane_scores->{max_keys_over_lines},
		 $airplane_scores->{all_keys_over_lines});

my ($non_airplanes_keys_over_lines_histogram, $non_airplanes_keys_over_lines_step_size) =
  make_histogram($histogram_size,
		 $non_airplane_scores->{min_keys_over_lines},
		 $non_airplane_scores->{max_keys_over_lines},
		 $non_airplane_scores->{all_keys_over_lines});


my ($airplanes_center_line_count_position_histogram,
    $airplanes_center_line_count_position_step_size) =
  make_histogram($histogram_size,
		 $airplane_scores->{min_center_line_count_position},
		 $airplane_scores->{max_center_line_count_position},
		 $airplane_scores->{all_center_line_count_position});

my ($non_airplanes_center_line_count_position_histogram,
    $non_airplanes_center_line_count_position_step_size) =
  make_histogram($histogram_size,
		 $non_airplane_scores->{min_center_line_count_position},
		 $non_airplane_scores->{max_center_line_count_position},
		 $non_airplane_scores->{all_center_line_count_position});

my ($airplanes_group_size_histogram, $airplanes_group_size_step_size) =
  make_histogram($histogram_size,
		 $airplane_scores->{min_group_size},
		 $airplane_scores->{max_group_size},
		 $airplane_scores->{all_group_size});

my ($non_airplanes_group_size_histogram, $non_airplanes_group_size_step_size)  =
  make_histogram($histogram_size,
		 $non_airplane_scores->{min_group_size},
		 $non_airplane_scores->{max_group_size},
		 $non_airplane_scores->{all_group_size});

my ($airplanes_fill_amount_histogram, $airplanes_fill_amount_step_size) =
  make_histogram($histogram_size,
		 $airplane_scores->{min_fill_amount},
		 $airplane_scores->{max_fill_amount},
		 $airplane_scores->{all_fill_amount});

my ($non_airplanes_fill_amount_histogram, $non_airplanes_fill_amount_step_size) =
  make_histogram($histogram_size,
		 $non_airplane_scores->{min_fill_amount},
		 $non_airplane_scores->{max_fill_amount},
		 $non_airplane_scores->{all_fill_amount});

my ($airplanes_aspect_ratio_histogram, $airplanes_aspect_ratio_step_size) =
  make_histogram($histogram_size,
		 $airplane_scores->{min_aspect_ratio},
		 $airplane_scores->{max_aspect_ratio},
		 $airplane_scores->{all_aspect_ratio});

my ($non_airplanes_aspect_ratio_histogram, $non_airplanes_aspect_ratio_step_size) =
  make_histogram($histogram_size,
		 $non_airplane_scores->{min_aspect_ratio},
		 $non_airplane_scores->{max_aspect_ratio},
		 $non_airplane_scores->{all_aspect_ratio});

my ($airplanes_surface_area_histogram, $airplanes_surface_area_step_size) =
  make_histogram($histogram_size,
		 $airplane_scores->{min_surface_area_ratio},
		 $airplane_scores->{max_surface_area_ratio},
		 $airplane_scores->{all_surface_area_ratio});

my ($non_airplanes_surface_area_histogram, $non_airplanes_surface_area_step_size) =
  make_histogram($histogram_size,
		 $non_airplane_scores->{min_surface_area_ratio},
		 $non_airplane_scores->{max_surface_area_ratio},
		 $non_airplane_scores->{all_surface_area_ratio});

print ("keysOverLines: airplane $airplane_scores->{avg_keys_over_lines} non airplane $non_airplane_scores->{avg_keys_over_lines}\n");
print ("midIndex:      airplane $airplane_scores->{avg_center_line_count_position} non airplane $non_airplane_scores->{avg_center_line_count_position}\n");

open my $output, ">Sources/ntar/ShouldPaintConstants.swift";

print $output <<END
import Foundation

// do not edit this file by hand, it was generated by $0
// from $airplane_scores->{size} airplane outlier group records
// and $non_airplane_scores->{size} airplane outlier group records

// OAS == Outlier Analysis Score

// keys over lines is the number of unique line counts over the number of lines
// in the hough transform.  Lines tend towards fewer unique line counts.
// There cannot be more keys than lines so this number is betwen 0 and 1
let OAS_AIRPLANE_KEYS_OVER_LINES_AVG = $airplane_scores->{avg_keys_over_lines}
let OAS_NON_AIRPLANE_KEYS_OVER_LINES_AVG = $non_airplane_scores->{avg_keys_over_lines}

// the mid value is the index of the line in the sorted list that has the
// same value as the average of the highest line count and lowest line count
// the closer this is to the start, the more likely this is a line.
// each index is divided by the total number of lines so this number is between 0 and 1
let OAS_AIRPLANE_CENTER_LINE_COUNT_POSITION_AVG = $airplane_scores->{avg_center_line_count_position}
let OAS_NON_AIRPLANE_CENTER_LINE_COUNT_POSITION_AVG = $non_airplane_scores->{avg_center_line_count_position}

// the average size for each group type.  Larger is more likely to be an airplane streak
// value in in pixels
let OAS_AIRPLANE_GROUP_SIZE_AVG = $airplane_scores->{avg_group_size}
let OAS_NON_AIRPLANE_GROUP_SIZE_AVG = $non_airplane_scores->{avg_group_size}

// Average fill amount for each group type.  The fill amount is the amount
// of the outlier group's bounding box which is filled by the outlier.
// A fully filled in box is a retangle.  Values between 0 and 1.
let OAS_AIRPLANE_FILL_AMOUNT_AVG = $airplane_scores->{avg_fill_amount}
let OAS_NON_AIRPLANE_FILL_AMOUNT_AVG = $non_airplane_scores->{avg_fill_amount}

// the average aspect ratio for each group type.  average group width/height.
let OAS_AIRPLANE_ASPECT_RATIO_AVG = $airplane_scores->{avg_aspect_ratio}
let OAS_NON_AIRPLANE_ASPECT_RATIO_AVG = $non_airplane_scores->{avg_aspect_ratio}

let OAS_AIRPLANES_KEYS_OVER_LINES_HISTOGRAM = $airplanes_keys_over_lines_histogram
let OAS_AIRPLANES_MIN_KEYS_OVER_LINES: Double = $airplane_scores->{min_keys_over_lines}
let OAS_AIRPLANES_MAX_KEYS_OVER_LINES: Double = $airplane_scores->{max_keys_over_lines}
let OAS_AIRPLANES_KEYS_OVER_LINES_STEP_SIZE: Double = $airplanes_keys_over_lines_step_size

let OAS_NON_AIRPLANES_KEYS_OVER_LINES_HISTOGRAM = $non_airplanes_keys_over_lines_histogram
let OAS_NON_AIRPLANES_MIN_KEYS_OVER_LINES: Double = $non_airplane_scores->{min_keys_over_lines}
let OAS_NON_AIRPLANES_MAX_KEYS_OVER_LINES: Double = $non_airplane_scores->{max_keys_over_lines}
let OAS_NON_AIRPLANES_KEYS_OVER_LINES_STEP_SIZE: Double = $non_airplanes_keys_over_lines_step_size

let OAS_AIRPLANES_CENTER_LINE_COUNT_POSITION_HISTOGRAM = $airplanes_center_line_count_position_histogram
let OAS_AIRPLANES_MIN_CENTER_LINE_COUNT_POSITION: Double = $airplane_scores->{min_center_line_count_position}
let OAS_AIRPLANES_MAX_CENTER_LINE_COUNT_POSITION: Double = $airplane_scores->{max_center_line_count_position}
let OAS_AIRPLANES_CENTER_LINE_COUNT_POSITION_STEP_SIZE: Double = $airplanes_center_line_count_position_step_size

let OAS_NON_AIRPLANES_CENTER_LINE_COUNT_POSITION_HISTOGRAM = $non_airplanes_center_line_count_position_histogram
let OAS_NON_AIRPLANES_MIN_CENTER_LINE_COUNT_POSITION: Double = $non_airplane_scores->{min_center_line_count_position}
let OAS_NON_AIRPLANES_MAX_CENTER_LINE_COUNT_POSITION: Double = $non_airplane_scores->{max_center_line_count_position}
let OAS_NON_AIRPLANES_CENTER_LINE_COUNT_POSITION_STEP_SIZE: Double = $non_airplanes_center_line_count_position_step_size


let OAS_AIRPLANES_GROUP_SIZE_HISTOGRAM = $airplanes_group_size_histogram
let OAS_AIRPLANES_MIN_GROUP_SIZE: Double = $airplane_scores->{min_group_size}
let OAS_AIRPLANES_MAX_GROUP_SIZE: Double = $airplane_scores->{max_group_size}
let OAS_AIRPLANES_GROUP_SIZE_STEP_SIZE: Double = $airplanes_group_size_step_size

let OAS_NON_AIRPLANES_GROUP_SIZE_HISTOGRAM = $non_airplanes_group_size_histogram
let OAS_NON_AIRPLANES_MIN_GROUP_SIZE: Double = $non_airplane_scores->{min_group_size}
let OAS_NON_AIRPLANES_MAX_GROUP_SIZE: Double = $non_airplane_scores->{max_group_size}
let OAS_NON_AIRPLANES_GROUP_SIZE_STEP_SIZE: Double = $non_airplanes_group_size_step_size


let OAS_AIRPLANES_FILL_AMOUNT_HISTOGRAM = $airplanes_fill_amount_histogram
let OAS_AIRPLANES_MIN_FILL_AMOUNT: Double = $airplane_scores->{min_fill_amount}
let OAS_AIRPLANES_MAX_FILL_AMOUNT: Double = $airplane_scores->{max_fill_amount}
let OAS_AIRPLANES_FILL_AMOUNT_STEP_SIZE: Double = $airplanes_fill_amount_step_size

let OAS_NON_AIRPLANES_FILL_AMOUNT_HISTOGRAM = $non_airplanes_fill_amount_histogram
let OAS_NON_AIRPLANES_MIN_FILL_AMOUNT: Double = $non_airplane_scores->{min_fill_amount}
let OAS_NON_AIRPLANES_MAX_FILL_AMOUNT: Double = $non_airplane_scores->{max_fill_amount}
let OAS_NON_AIRPLANES_FILL_AMOUNT_STEP_SIZE: Double = $non_airplanes_fill_amount_step_size


let OAS_AIRPLANES_ASPECT_RATIO_HISTOGRAM = $airplanes_aspect_ratio_histogram
let OAS_AIRPLANES_MIN_ASPECT_RATIO: Double = $airplane_scores->{min_aspect_ratio}
let OAS_AIRPLANES_MAX_ASPECT_RATIO: Double = $airplane_scores->{max_aspect_ratio}
let OAS_AIRPLANES_ASPECT_RATIO_STEP_SIZE: Double = $airplanes_aspect_ratio_step_size

let OAS_NON_AIRPLANES_ASPECT_RATIO_HISTOGRAM = $non_airplanes_aspect_ratio_histogram
let OAS_NON_AIRPLANES_MIN_ASPECT_RATIO: Double = $non_airplane_scores->{min_aspect_ratio}
let OAS_NON_AIRPLANES_MAX_ASPECT_RATIO: Double = $non_airplane_scores->{max_aspect_ratio}
let OAS_NON_AIRPLANES_ASPECT_RATIO_STEP_SIZE: Double = $non_airplanes_aspect_ratio_step_size

let OAS_AIRPLANES_SURFACE_AREA_RATIO_HISTOGRAM = $airplanes_surface_area_histogram
let OAS_AIRPLANES_MIN_SURFACE_AREA_RATIO: Double = $airplane_scores->{min_surface_area_ratio}
let OAS_AIRPLANES_MAX_SURFACE_AREA_RATIO: Double = $airplane_scores->{max_surface_area_ratio}
let OAS_AIRPLANES_SURFACE_AREA_RATIO_STEP_SIZE: Double = $airplanes_surface_area_step_size

let OAS_NON_AIRPLANES_SURFACE_AREA_RATIO_HISTOGRAM = $non_airplanes_surface_area_histogram
let OAS_NON_AIRPLANES_MIN_SURFACE_AREA_RATIO: Double = $non_airplane_scores->{min_surface_area_ratio}
let OAS_NON_AIRPLANES_MAX_SURFACE_AREA_RATIO: Double = $non_airplane_scores->{max_surface_area_ratio}
let OAS_NON_AIRPLANES_SURFACE_AREA_RATIO_STEP_SIZE: Double = $non_airplanes_surface_area_step_size

let OAS_HISTOGRAM_SIZE = $histogram_size

END
;

close $output;

########
# subs #
########

# XXX we need a logarithmic histogram for some of these
sub make_histogram($$$) {
  my ($histogram_size, $min_value, $max_value, $all_values) = @_;

  my @histogram = ();
  my $step_size = ($max_value - $min_value)/$histogram_size;
  my $current_step = $min_value;

  for(my $i = 0 ; $i < $histogram_size ; $i++) {
    $histogram[$i] = 0;
    foreach my $value (@$all_values) {
      $histogram[$i]++ if($current_step <= $value && $value <= $current_step + $step_size);
    }
    $current_step += $step_size;
  }
  my $max_count = undef;
  for(my $i = 0 ; $i < $histogram_size ; $i++) {
    $max_count = $histogram[$i] unless defined $max_count;
    $max_count = $histogram[$i] if $max_count < $histogram[$i];
  }
  for(my $i = 0 ; $i < $histogram_size ; $i++) {
    $histogram[$i] /= $max_count;
  }

  return ("[\n    ".join(",\n    ", @histogram)."\n]\n", $step_size);
}

sub process_csv_dir($) {
  my ($dirname) = @_;

  opendir my $dir, $dirname or die "cannot open source dir: $!\n";

  my $total_csv_count = 0;
  my $center_line_count_position_count = 0;

  my $total_keys_over_lines = 0;
  my $min_keys_over_lines = undef;
  my $max_keys_over_lines = undef;
  my $all_keys_over_lines = [];

  my $total_center_line_count_position = 0;
  my $min_center_line_count_position = undef;
  my $max_center_line_count_position = undef;
  my $all_center_line_count_position = [];

  my $total_group_size = 0;
  my $min_group_size = undef;
  my $max_group_size = undef;
  my $all_group_size = [];

  my $total_fill_amount = 0;
  my $min_fill_amount = undef;
  my $max_fill_amount = undef;
  my $all_fill_amount = [];

  my $total_aspect_ratio = 0;
  my $min_aspect_ratio = undef;
  my $max_aspect_ratio = undef;
  my $all_aspect_ratio = [];

  my $total_surface_area_ratio = 0;
  my $min_surface_area_ratio = undef;
  my $max_surface_area_ratio = undef;
  my $all_surface_area_ratio = [];

  foreach my $filename (readdir $dir) {
    if ($filename =~ /^(.*)-([\d.]+)[.]csv$/) {
      my $first_part = $1;
      my $surface_area_ratio = $2;

      open my $txt_file, "<$dirname/$first_part.txt";
      my $group_size = 0;
      my $group_width = undef;
      my $group_height = 0;
      while(<$txt_file>) {
	$group_width = length $_ unless defined $group_width;
	$group_height++;
	my $count = $_ =~ tr/[*]//;
	$group_size += $count;
      }
      my $aspect_ratio = $group_width/$group_height;
      my $fill_amount = $group_size / ($group_width * $group_height);

      # make sure min and max values are set
      $min_group_size = $group_size unless defined $min_group_size;
      $max_group_size = $group_size unless defined $max_group_size;

      $min_fill_amount = $fill_amount unless defined $min_fill_amount;
      $max_fill_amount = $fill_amount unless defined $max_fill_amount;

      $min_aspect_ratio = $aspect_ratio unless defined $min_aspect_ratio;
      $max_aspect_ratio = $aspect_ratio unless defined $max_aspect_ratio;

      $min_surface_area_ratio = $surface_area_ratio unless defined $min_surface_area_ratio;
      $max_surface_area_ratio = $surface_area_ratio unless defined $max_surface_area_ratio;

      # set min and maxes
      $min_group_size = $group_size if $min_group_size > $group_size;
      $max_group_size = $group_size if $max_group_size < $group_size;

      $min_fill_amount = $fill_amount if $min_fill_amount > $fill_amount;
      $max_fill_amount = $fill_amount if $max_fill_amount < $fill_amount;

      $min_aspect_ratio = $aspect_ratio if $min_aspect_ratio > $aspect_ratio;
      $max_aspect_ratio = $aspect_ratio if $max_aspect_ratio < $aspect_ratio;

      $min_surface_area_ratio = $surface_area_ratio
	if $min_surface_area_ratio > $surface_area_ratio;
      $max_surface_area_ratio = $surface_area_ratio
	if $max_surface_area_ratio < $surface_area_ratio;

      # add to totals
      $total_aspect_ratio += $aspect_ratio;
      $total_group_size += $group_size;
      $total_fill_amount += $fill_amount;
      $total_surface_area_ratio += $surface_area_ratio;

      # record individual values
      push @$all_group_size, $group_size;
      push @$all_aspect_ratio, $aspect_ratio;
      push @$all_fill_amount, $fill_amount;
      push @$all_surface_area_ratio, $surface_area_ratio;

      close $txt_file;

      open my $fh, "<$dirname/$filename";

      my $line_count_map = {};
      my $line_count = 0;
      my $first_count = undef;
      my $last_count = undef;
      my @lines = ();

      while (<$fh>) {
	if (/^([^,]+),([^,]+),([^,]+)$/) {
	  my ($theta, $rho, $count) = ($1, $2, $3);
	  chomp $count;
	  $first_count = $count unless defined $first_count;
	  $line_count++;
	  $line_count_map->{$count}++;
	  push @lines, $count;
	  $last_count = $count;
	}
      }
      close $fh;

      if ($line_count > 0) {
	# find the average of first and last count, and then find the index of that
	# value in @lines.  Use the value of this index and the length of @lines as an indicator

	my $mid_count = ($first_count - $last_count) / 2;

	my $mid_index = undef;
	my $center_line_count_position = undef;

	for (my $i = 0 ; $i < scalar(@lines) ; $i++) {
	  if ($lines[$i] <= $mid_count) {
	    $mid_index = $i;
	    $center_line_count_position = $mid_index / scalar(@lines);
	    $total_center_line_count_position += $center_line_count_position;

	    # make sure min and max values are set
	    $min_center_line_count_position = $center_line_count_position
	      unless defined $min_center_line_count_position;
	    $max_center_line_count_position = $center_line_count_position
	      unless defined $max_center_line_count_position;

	    # set min and maxes
	    $min_center_line_count_position = $center_line_count_position
	      if $min_center_line_count_position > $center_line_count_position;
	    $max_center_line_count_position = $center_line_count_position
	      if $max_center_line_count_position < $center_line_count_position;

	    push @$all_center_line_count_position, $center_line_count_position;
	    $center_line_count_position_count++;
	    last;
	  }
	}

	# compare the number of keys with the number of lines
	my $key_count = scalar(keys %$line_count_map);
	$total_csv_count++;
	my $keys_over_lines = $key_count / $line_count;

	$total_keys_over_lines += $keys_over_lines;
	push @$all_keys_over_lines, $keys_over_lines;

	# make sure min and max values are set
	$min_keys_over_lines = $keys_over_lines unless defined $min_keys_over_lines;
	$max_keys_over_lines = $keys_over_lines unless defined $max_keys_over_lines;

	# set min and maxes
	$min_keys_over_lines = $keys_over_lines if $min_keys_over_lines > $keys_over_lines;
	$max_keys_over_lines = $keys_over_lines if $max_keys_over_lines < $keys_over_lines;
      }

#      print "$filename has $line_count lines and $key_count keys $first_count first count $keys_over_lines percentage\n";
    }
  }
  if ($total_csv_count > 0) {
    #print("dividing $total_keys_over_lines by $total_csv_count\n");
    $total_keys_over_lines /= $total_csv_count;
    $total_group_size /= $total_csv_count;
    $total_fill_amount /= $total_csv_count;
    $total_aspect_ratio /= $total_csv_count;
  }
  if ($center_line_count_position_count > 0) {
    $total_center_line_count_position /= $center_line_count_position_count;

  }
  closedir $dir;

  #print "we found $total_center_line_count_position average mid value\n";

  return {
	  avg_keys_over_lines => $total_keys_over_lines,
	  min_keys_over_lines => $min_keys_over_lines,
	  max_keys_over_lines => $max_keys_over_lines,
	  all_keys_over_lines => $all_keys_over_lines,

	  avg_center_line_count_position => $total_center_line_count_position,
	  min_center_line_count_position => $min_center_line_count_position,
	  max_center_line_count_position => $max_center_line_count_position,
	  all_center_line_count_position => $all_center_line_count_position,

	  avg_group_size => $total_group_size,
	  min_group_size => $min_group_size,
	  max_group_size => $max_group_size,
	  all_group_size => $all_group_size,

	  avg_fill_amount => $total_fill_amount,
	  min_fill_amount => $min_fill_amount,
	  max_fill_amount => $max_fill_amount,
	  all_fill_amount => $all_fill_amount,

	  avg_aspect_ratio => $total_aspect_ratio,
	  min_aspect_ratio => $min_aspect_ratio,
	  max_aspect_ratio => $max_aspect_ratio,
	  all_aspect_ratio => $all_aspect_ratio,

	  avg_surface_area_ratio => $total_surface_area_ratio,
	  min_surface_area_ratio => $min_surface_area_ratio,
	  max_surface_area_ratio => $max_surface_area_ratio,
	  all_surface_area_ratio => $all_surface_area_ratio,

	  size => $total_csv_count,
	 };
}
