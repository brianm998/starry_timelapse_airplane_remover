/*
   written by decision_tree_generator on 2023-05-08 20:46:37 +0000.

   The classifications of 12 trees are combined here with weights from test data.
   
   Trees were computed to the maximum depth possible

   Trees were NOT pruned with test data

   tree(StarCore.DecisionTreeParams(name: "f3674472", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65461, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "12df6c33", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "d12ad183", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "ffc6ed3c", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "4034787f", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "6982dd11", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "6da26fd5", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "08b1bc74", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "c6a15010", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045073, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "bb85f10a", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045074, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "5ec3bf3f", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045074, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "b3bec4f0", inputSequences: ["/qp/ntar_validated/05_08_2023-outlier-csv-data-train"], positiveTrainingSize: 65462, negativeTrainingSize: 2045074, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))


 */

import Foundation
import StarCore

// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE

@available(macOS 10.15, *)
public final class OutlierGroupClassifierForest_56560337: NamedOutlierGroupClassifier {

    public init() { }

    public let name = "56560337"
    
    public let type: ClassifierType = .forest(DecisionForestParams(name: "56560337",
                                                                   treeCount: 12,
                                                                   treeNames: [ "f3674472", "12df6c33", "d12ad183", "ffc6ed3c", "4034787f", "6982dd11", "6da26fd5", "08b1bc74", "c6a15010", "bb85f10a", "5ec3bf3f", "b3bec4f0"]))

    let tree_f3674472 = OutlierGroupDecisionTree_f3674472()
    let tree_12df6c33 = OutlierGroupDecisionTree_12df6c33()
    let tree_d12ad183 = OutlierGroupDecisionTree_d12ad183()
    let tree_ffc6ed3c = OutlierGroupDecisionTree_ffc6ed3c()
    let tree_4034787f = OutlierGroupDecisionTree_4034787f()
    let tree_6982dd11 = OutlierGroupDecisionTree_6982dd11()
    let tree_6da26fd5 = OutlierGroupDecisionTree_6da26fd5()
    let tree_08b1bc74 = OutlierGroupDecisionTree_08b1bc74()
    let tree_c6a15010 = OutlierGroupDecisionTree_c6a15010()
    let tree_bb85f10a = OutlierGroupDecisionTree_bb85f10a()
    let tree_5ec3bf3f = OutlierGroupDecisionTree_5ec3bf3f()
    let tree_b3bec4f0 = OutlierGroupDecisionTree_b3bec4f0()

    // returns -1 for negative, +1 for positive
    public func classification(of group: OutlierGroup) async -> Double {
        let (size, width, height, centerX, centerY, minX, minY, maxX, maxY, hypotenuse, aspectRatio, fillAmount, surfaceAreaRatio, averagebrightness, medianBrightness, maxBrightness, avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection, longerHistogramStreakDetection, maxHoughTransformCount, maxHoughTheta, neighboringInterFrameOutlierThetaScore, maxOverlap, maxOverlapTimesThetaHisto) = await (group.decisionTreeValue(for: .size), group.decisionTreeValue(for: .width), group.decisionTreeValue(for: .height), group.decisionTreeValue(for: .centerX), group.decisionTreeValue(for: .centerY), group.decisionTreeValue(for: .minX), group.decisionTreeValue(for: .minY), group.decisionTreeValue(for: .maxX), group.decisionTreeValue(for: .maxY), group.decisionTreeValue(for: .hypotenuse), group.decisionTreeValue(for: .aspectRatio), group.decisionTreeValue(for: .fillAmount), group.decisionTreeValue(for: .surfaceAreaRatio), group.decisionTreeValue(for: .averagebrightness), group.decisionTreeValue(for: .medianBrightness), group.decisionTreeValue(for: .maxBrightness), group.decisionTreeValue(for: .avgCountOfFirst10HoughLines), group.decisionTreeValue(for: .maxThetaDiffOfFirst10HoughLines), group.decisionTreeValue(for: .maxRhoDiffOfFirst10HoughLines), group.decisionTreeValue(for: .avgCountOfAllHoughLines), group.decisionTreeValue(for: .maxThetaDiffOfAllHoughLines), group.decisionTreeValue(for: .maxRhoDiffOfAllHoughLines), group.decisionTreeValue(for: .numberOfNearbyOutliersInSameFrame), group.decisionTreeValue(for: .adjecentFrameNeighboringOutliersBestTheta), group.decisionTreeValue(for: .histogramStreakDetection), group.decisionTreeValue(for: .longerHistogramStreakDetection), group.decisionTreeValue(for: .maxHoughTransformCount), group.decisionTreeValue(for: .maxHoughTheta), group.decisionTreeValue(for: .neighboringInterFrameOutlierThetaScore), group.decisionTreeValue(for: .maxOverlap), group.decisionTreeValue(for: .maxOverlapTimesThetaHisto))

        let score = await withLimitedTaskGroup(of: Double.self) { taskGroup in

            await taskGroup.addTask() { self.tree_f3674472.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9832852530274957 }

            await taskGroup.addTask() { self.tree_12df6c33.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9838520533808663 }

            await taskGroup.addTask() { self.tree_d12ad183.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9834963372970268 }

            await taskGroup.addTask() { self.tree_ffc6ed3c.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9835901525279296 }

            await taskGroup.addTask() { self.tree_4034787f.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9836644229190609 }

            await taskGroup.addTask() { self.tree_6982dd11.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9834767924572554 }

            await taskGroup.addTask() { self.tree_6da26fd5.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9832500723159071 }

            await taskGroup.addTask() { self.tree_08b1bc74.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9838129637013235 }

            await taskGroup.addTask() { self.tree_c6a15010.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9834259758738498 }

            await taskGroup.addTask() { self.tree_bb85f10a.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9835706076881582 }

            await taskGroup.addTask() { self.tree_5ec3bf3f.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9833477965147642 }

            await taskGroup.addTask() { self.tree_b3bec4f0.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9836292422074724 }


            var total: Double = 0.0
            await taskGroup.forEach() { total += $0 }
            return total / 12
        }
        return score
    }

    // returns -1 for negative, +1 for positive
    public func classification (
       of features: [OutlierGroup.Feature],   // parallel
       and values: [Double]                   // arrays
    ) async -> Double
    {
        let score = await withLimitedTaskGroup(of: Double.self) { taskGroup in

            await taskGroup.addTask() { self.tree_f3674472.classification(of: features, and: values) * 0.9832852530274957 }

            await taskGroup.addTask() { self.tree_12df6c33.classification(of: features, and: values) * 0.9838520533808663 }

            await taskGroup.addTask() { self.tree_d12ad183.classification(of: features, and: values) * 0.9834963372970268 }

            await taskGroup.addTask() { self.tree_ffc6ed3c.classification(of: features, and: values) * 0.9835901525279296 }

            await taskGroup.addTask() { self.tree_4034787f.classification(of: features, and: values) * 0.9836644229190609 }

            await taskGroup.addTask() { self.tree_6982dd11.classification(of: features, and: values) * 0.9834767924572554 }

            await taskGroup.addTask() { self.tree_6da26fd5.classification(of: features, and: values) * 0.9832500723159071 }

            await taskGroup.addTask() { self.tree_08b1bc74.classification(of: features, and: values) * 0.9838129637013235 }

            await taskGroup.addTask() { self.tree_c6a15010.classification(of: features, and: values) * 0.9834259758738498 }

            await taskGroup.addTask() { self.tree_bb85f10a.classification(of: features, and: values) * 0.9835706076881582 }

            await taskGroup.addTask() { self.tree_5ec3bf3f.classification(of: features, and: values) * 0.9833477965147642 }

            await taskGroup.addTask() { self.tree_b3bec4f0.classification(of: features, and: values) * 0.9836292422074724 }


            var total: Double = 0.0
            await taskGroup.forEach() { total += $0 }
            return total / 12
        }
        return score
    }
}