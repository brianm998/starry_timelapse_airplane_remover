/*
   written by decision_tree_generator on 2023-05-10 19:32:42 +0000.

   The classifications of 16 trees are combined here with weights from test data.
   
   Trees were computed to the maximum depth possible

   Trees were NOT pruned with test data

   tree(StarCore.DecisionTreeParams(name: "b6bc061a", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "0fb16471", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "f90c531a", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "c98ca1cf", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "c1ba87ac", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "ee031ad4", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "241982c9", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "7afa560e", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "476611c5", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351888, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "3dafb241", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "478b875c", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "f2f6fd15", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "1a6609ec", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "e07e1f50", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "b2165404", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71579, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(StarCore.DecisionTreeParams(name: "28f6f8d6", inputSequences: ["/qp/ntar_validated/05_10_2023-outlier-csv-data-train"], positiveTrainingSize: 71580, negativeTrainingSize: 2351889, decisionTypes: [StarCore.OutlierGroup.Feature.size, StarCore.OutlierGroup.Feature.width, StarCore.OutlierGroup.Feature.height, StarCore.OutlierGroup.Feature.centerX, StarCore.OutlierGroup.Feature.centerY, StarCore.OutlierGroup.Feature.minX, StarCore.OutlierGroup.Feature.minY, StarCore.OutlierGroup.Feature.maxX, StarCore.OutlierGroup.Feature.maxY, StarCore.OutlierGroup.Feature.hypotenuse, StarCore.OutlierGroup.Feature.aspectRatio, StarCore.OutlierGroup.Feature.fillAmount, StarCore.OutlierGroup.Feature.surfaceAreaRatio, StarCore.OutlierGroup.Feature.averagebrightness, StarCore.OutlierGroup.Feature.medianBrightness, StarCore.OutlierGroup.Feature.maxBrightness, StarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, StarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, StarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, StarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, StarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, StarCore.OutlierGroup.Feature.histogramStreakDetection, StarCore.OutlierGroup.Feature.longerHistogramStreakDetection, StarCore.OutlierGroup.Feature.maxHoughTransformCount, StarCore.OutlierGroup.Feature.maxHoughTheta, StarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, StarCore.OutlierGroup.Feature.maxOverlap, StarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [StarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))


 */

import Foundation
import StarCore

// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE

@available(macOS 10.15, *)
public final class OutlierGroupClassifierForest_1ea755d8: NamedOutlierGroupClassifier {

    public init() { }

    public let name = "1ea755d8"
    
    public let type: ClassifierType = .forest(DecisionForestParams(name: "1ea755d8",
                                                                   treeCount: 16,
                                                                   treeNames: [ "b6bc061a", "0fb16471", "f90c531a", "c98ca1cf", "c1ba87ac", "ee031ad4", "241982c9", "7afa560e", "476611c5", "3dafb241", "478b875c", "f2f6fd15", "1a6609ec", "e07e1f50", "b2165404", "28f6f8d6"]))

    let tree_b6bc061a = OutlierGroupDecisionTree_b6bc061a()
    let tree_0fb16471 = OutlierGroupDecisionTree_0fb16471()
    let tree_f90c531a = OutlierGroupDecisionTree_f90c531a()
    let tree_c98ca1cf = OutlierGroupDecisionTree_c98ca1cf()
    let tree_c1ba87ac = OutlierGroupDecisionTree_c1ba87ac()
    let tree_ee031ad4 = OutlierGroupDecisionTree_ee031ad4()
    let tree_241982c9 = OutlierGroupDecisionTree_241982c9()
    let tree_7afa560e = OutlierGroupDecisionTree_7afa560e()
    let tree_476611c5 = OutlierGroupDecisionTree_476611c5()
    let tree_3dafb241 = OutlierGroupDecisionTree_3dafb241()
    let tree_478b875c = OutlierGroupDecisionTree_478b875c()
    let tree_f2f6fd15 = OutlierGroupDecisionTree_f2f6fd15()
    let tree_1a6609ec = OutlierGroupDecisionTree_1a6609ec()
    let tree_e07e1f50 = OutlierGroupDecisionTree_e07e1f50()
    let tree_b2165404 = OutlierGroupDecisionTree_b2165404()
    let tree_28f6f8d6 = OutlierGroupDecisionTree_28f6f8d6()

    // returns -1 for negative, +1 for positive
    public func classification(of group: OutlierGroup) async -> Double {
        let (size, width, height, centerX, centerY, minX, minY, maxX, maxY, hypotenuse, aspectRatio, fillAmount, surfaceAreaRatio, averagebrightness, medianBrightness, maxBrightness, avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection, longerHistogramStreakDetection, maxHoughTransformCount, maxHoughTheta, neighboringInterFrameOutlierThetaScore, maxOverlap, maxOverlapTimesThetaHisto) = await (group.decisionTreeValue(for: .size), group.decisionTreeValue(for: .width), group.decisionTreeValue(for: .height), group.decisionTreeValue(for: .centerX), group.decisionTreeValue(for: .centerY), group.decisionTreeValue(for: .minX), group.decisionTreeValue(for: .minY), group.decisionTreeValue(for: .maxX), group.decisionTreeValue(for: .maxY), group.decisionTreeValue(for: .hypotenuse), group.decisionTreeValue(for: .aspectRatio), group.decisionTreeValue(for: .fillAmount), group.decisionTreeValue(for: .surfaceAreaRatio), group.decisionTreeValue(for: .averagebrightness), group.decisionTreeValue(for: .medianBrightness), group.decisionTreeValue(for: .maxBrightness), group.decisionTreeValue(for: .avgCountOfFirst10HoughLines), group.decisionTreeValue(for: .maxThetaDiffOfFirst10HoughLines), group.decisionTreeValue(for: .maxRhoDiffOfFirst10HoughLines), group.decisionTreeValue(for: .avgCountOfAllHoughLines), group.decisionTreeValue(for: .maxThetaDiffOfAllHoughLines), group.decisionTreeValue(for: .maxRhoDiffOfAllHoughLines), group.decisionTreeValue(for: .numberOfNearbyOutliersInSameFrame), group.decisionTreeValue(for: .adjecentFrameNeighboringOutliersBestTheta), group.decisionTreeValue(for: .histogramStreakDetection), group.decisionTreeValue(for: .longerHistogramStreakDetection), group.decisionTreeValue(for: .maxHoughTransformCount), group.decisionTreeValue(for: .maxHoughTheta), group.decisionTreeValue(for: .neighboringInterFrameOutlierThetaScore), group.decisionTreeValue(for: .maxOverlap), group.decisionTreeValue(for: .maxOverlapTimesThetaHisto))

        let score = await withLimitedTaskGroup(of: Double.self) { taskGroup in

            await taskGroup.addTask() { self.tree_b6bc061a.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9846009226216381 }

            await taskGroup.addTask() { self.tree_0fb16471.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9842423187396641 }

            await taskGroup.addTask() { self.tree_f90c531a.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9839220123596484 }

            await taskGroup.addTask() { self.tree_c98ca1cf.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9841900948733572 }

            await taskGroup.addTask() { self.tree_c1ba87ac.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9844407694316303 }

            await taskGroup.addTask() { self.tree_ee031ad4.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.984270171468361 }

            await taskGroup.addTask() { self.tree_241982c9.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.98418661328227 }

            await taskGroup.addTask() { self.tree_7afa560e.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9841726869179215 }

            await taskGroup.addTask() { self.tree_476611c5.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9843502480633649 }

            await taskGroup.addTask() { self.tree_3dafb241.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9839324571329098 }

            await taskGroup.addTask() { self.tree_478b875c.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9839289755418226 }

            await taskGroup.addTask() { self.tree_f2f6fd15.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9841622421446601 }

            await taskGroup.addTask() { self.tree_1a6609ec.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9842005396466185 }

            await taskGroup.addTask() { self.tree_e07e1f50.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9843711376098877 }

            await taskGroup.addTask() { self.tree_b2165404.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9842458003307512 }

            await taskGroup.addTask() { self.tree_28f6f8d6.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9841900948733572 }


            var total: Double = 0.0
            await taskGroup.forEach() { total += $0 }
            return total / 16
        }
        return score
    }

    // returns -1 for negative, +1 for positive
    public func classification (
       of features: [OutlierGroup.Feature],   // parallel
       and values: [Double]                   // arrays
    ) async -> Double
    {
        let score = await withLimitedTaskGroup(of: Double.self) { taskGroup in

            await taskGroup.addTask() { self.tree_b6bc061a.classification(of: features, and: values) * 0.9846009226216381 }

            await taskGroup.addTask() { self.tree_0fb16471.classification(of: features, and: values) * 0.9842423187396641 }

            await taskGroup.addTask() { self.tree_f90c531a.classification(of: features, and: values) * 0.9839220123596484 }

            await taskGroup.addTask() { self.tree_c98ca1cf.classification(of: features, and: values) * 0.9841900948733572 }

            await taskGroup.addTask() { self.tree_c1ba87ac.classification(of: features, and: values) * 0.9844407694316303 }

            await taskGroup.addTask() { self.tree_ee031ad4.classification(of: features, and: values) * 0.984270171468361 }

            await taskGroup.addTask() { self.tree_241982c9.classification(of: features, and: values) * 0.98418661328227 }

            await taskGroup.addTask() { self.tree_7afa560e.classification(of: features, and: values) * 0.9841726869179215 }

            await taskGroup.addTask() { self.tree_476611c5.classification(of: features, and: values) * 0.9843502480633649 }

            await taskGroup.addTask() { self.tree_3dafb241.classification(of: features, and: values) * 0.9839324571329098 }

            await taskGroup.addTask() { self.tree_478b875c.classification(of: features, and: values) * 0.9839289755418226 }

            await taskGroup.addTask() { self.tree_f2f6fd15.classification(of: features, and: values) * 0.9841622421446601 }

            await taskGroup.addTask() { self.tree_1a6609ec.classification(of: features, and: values) * 0.9842005396466185 }

            await taskGroup.addTask() { self.tree_e07e1f50.classification(of: features, and: values) * 0.9843711376098877 }

            await taskGroup.addTask() { self.tree_b2165404.classification(of: features, and: values) * 0.9842458003307512 }

            await taskGroup.addTask() { self.tree_28f6f8d6.classification(of: features, and: values) * 0.9841900948733572 }


            var total: Double = 0.0
            await taskGroup.forEach() { total += $0 }
            return total / 16
        }
        return score
    }
}