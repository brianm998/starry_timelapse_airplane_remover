/*
   written by decision_tree_generator on 2023-05-07 17:45:34 +0000.

   The classifications of 12 trees are combined here with weights from test data.
   
   Trees were computed to the maximum depth possible

   Trees were NOT pruned with test data

   tree(starCore.DecisionTreeParams(name: "01cf0174", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642701, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "eb0fd8e6", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642701, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "ca8502f4", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642701, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "232c1195", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642701, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "bdc44123", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642701, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "00438806", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642701, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "e87c7c17", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642702, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "f226af9c", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642702, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "e901e04c", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642702, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "5bcbf7f8", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642702, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "632b165d", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642702, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(starCore.DecisionTreeParams(name: "de2147ac", inputSequences: ["/qp/star_validated/05_06_2023-outlier-csv-train"], positiveTrainingSize: 56529, negativeTrainingSize: 1642702, decisionTypes: [starCore.OutlierGroup.Feature.size, starCore.OutlierGroup.Feature.width, starCore.OutlierGroup.Feature.height, starCore.OutlierGroup.Feature.centerX, starCore.OutlierGroup.Feature.centerY, starCore.OutlierGroup.Feature.minX, starCore.OutlierGroup.Feature.minY, starCore.OutlierGroup.Feature.maxX, starCore.OutlierGroup.Feature.maxY, starCore.OutlierGroup.Feature.hypotenuse, starCore.OutlierGroup.Feature.aspectRatio, starCore.OutlierGroup.Feature.fillAmount, starCore.OutlierGroup.Feature.surfaceAreaRatio, starCore.OutlierGroup.Feature.averagebrightness, starCore.OutlierGroup.Feature.medianBrightness, starCore.OutlierGroup.Feature.maxBrightness, starCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, starCore.OutlierGroup.Feature.avgCountOfAllHoughLines, starCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, starCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, starCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, starCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, starCore.OutlierGroup.Feature.histogramStreakDetection, starCore.OutlierGroup.Feature.longerHistogramStreakDetection, starCore.OutlierGroup.Feature.maxHoughTransformCount, starCore.OutlierGroup.Feature.maxHoughTheta, starCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, starCore.OutlierGroup.Feature.maxOverlap, starCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [starCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))


 */

import Foundation
import StarCore

// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE

@available(macOS 10.15, *)
public final class OutlierGroupClassifierForest_95bc68ea: NamedOutlierGroupClassifier {

    public init() { }

    public let name = "95bc68ea"
    
    public let type: ClassifierType = .forest(DecisionForestParams(name: "95bc68ea",
                                                                   treeCount: 12,
                                                                   treeNames: [ "01cf0174", "eb0fd8e6", "ca8502f4", "232c1195", "bdc44123", "00438806", "e87c7c17", "f226af9c", "e901e04c", "5bcbf7f8", "632b165d", "de2147ac"]))

    let tree_01cf0174 = OutlierGroupDecisionTree_01cf0174()
    let tree_eb0fd8e6 = OutlierGroupDecisionTree_eb0fd8e6()
    let tree_ca8502f4 = OutlierGroupDecisionTree_ca8502f4()
    let tree_232c1195 = OutlierGroupDecisionTree_232c1195()
    let tree_bdc44123 = OutlierGroupDecisionTree_bdc44123()
    let tree_00438806 = OutlierGroupDecisionTree_00438806()
    let tree_e87c7c17 = OutlierGroupDecisionTree_e87c7c17()
    let tree_f226af9c = OutlierGroupDecisionTree_f226af9c()
    let tree_e901e04c = OutlierGroupDecisionTree_e901e04c()
    let tree_5bcbf7f8 = OutlierGroupDecisionTree_5bcbf7f8()
    let tree_632b165d = OutlierGroupDecisionTree_632b165d()
    let tree_de2147ac = OutlierGroupDecisionTree_de2147ac()

    // returns -1 for negative, +1 for positive
    public func classification(of group: OutlierGroup) async -> Double {
        let (size, width, height, centerX, centerY, minX, minY, maxX, maxY, hypotenuse, aspectRatio, fillAmount, surfaceAreaRatio, averagebrightness, medianBrightness, maxBrightness, avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection, longerHistogramStreakDetection, maxHoughTransformCount, maxHoughTheta, neighboringInterFrameOutlierThetaScore, maxOverlap, maxOverlapTimesThetaHisto) = await (group.decisionTreeValue(for: .size), group.decisionTreeValue(for: .width), group.decisionTreeValue(for: .height), group.decisionTreeValue(for: .centerX), group.decisionTreeValue(for: .centerY), group.decisionTreeValue(for: .minX), group.decisionTreeValue(for: .minY), group.decisionTreeValue(for: .maxX), group.decisionTreeValue(for: .maxY), group.decisionTreeValue(for: .hypotenuse), group.decisionTreeValue(for: .aspectRatio), group.decisionTreeValue(for: .fillAmount), group.decisionTreeValue(for: .surfaceAreaRatio), group.decisionTreeValue(for: .averagebrightness), group.decisionTreeValue(for: .medianBrightness), group.decisionTreeValue(for: .maxBrightness), group.decisionTreeValue(for: .avgCountOfFirst10HoughLines), group.decisionTreeValue(for: .maxThetaDiffOfFirst10HoughLines), group.decisionTreeValue(for: .maxRhoDiffOfFirst10HoughLines), group.decisionTreeValue(for: .avgCountOfAllHoughLines), group.decisionTreeValue(for: .maxThetaDiffOfAllHoughLines), group.decisionTreeValue(for: .maxRhoDiffOfAllHoughLines), group.decisionTreeValue(for: .numberOfNearbyOutliersInSameFrame), group.decisionTreeValue(for: .adjecentFrameNeighboringOutliersBestTheta), group.decisionTreeValue(for: .histogramStreakDetection), group.decisionTreeValue(for: .longerHistogramStreakDetection), group.decisionTreeValue(for: .maxHoughTransformCount), group.decisionTreeValue(for: .maxHoughTheta), group.decisionTreeValue(for: .neighboringInterFrameOutlierThetaScore), group.decisionTreeValue(for: .maxOverlap), group.decisionTreeValue(for: .maxOverlapTimesThetaHisto))

        let score = await withLimitedTaskGroup(of: Double.self) { taskGroup in

            await taskGroup.addTask() { self.tree_01cf0174.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9819324684740671 }

            await taskGroup.addTask() { self.tree_eb0fd8e6.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9821266733991041 }

            await taskGroup.addTask() { self.tree_ca8502f4.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9823338253191434 }

            await taskGroup.addTask() { self.tree_232c1195.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9819648359615734 }

            await taskGroup.addTask() { self.tree_bdc44123.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.982379139801652 }

            await taskGroup.addTask() { self.tree_00438806.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9821978818716176 }

            await taskGroup.addTask() { self.tree_e87c7c17.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9827028146767135 }

            await taskGroup.addTask() { self.tree_f226af9c.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9822949843341361 }

            await taskGroup.addTask() { self.tree_e901e04c.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.982715761671716 }

            await taskGroup.addTask() { self.tree_5bcbf7f8.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9824827157616717 }

            await taskGroup.addTask() { self.tree_632b165d.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9819907299515782 }

            await taskGroup.addTask() { self.tree_de2147ac.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9819324684740671 }


            var total: Double = 0.0
            await taskGroup.forEach() { total += $0 }
            return total / 12
        }
        return score
    }

    // returns -1 for negative, +1 for positive
    public func classification (
       of features: [OutlierGroup.Feature],   // parallel
       and values: [Double]                   // arrays
    ) async -> Double
    {
        let score = await withLimitedTaskGroup(of: Double.self) { taskGroup in

            await taskGroup.addTask() { self.tree_01cf0174.classification(of: features, and: values) * 0.9819324684740671 }

            await taskGroup.addTask() { self.tree_eb0fd8e6.classification(of: features, and: values) * 0.9821266733991041 }

            await taskGroup.addTask() { self.tree_ca8502f4.classification(of: features, and: values) * 0.9823338253191434 }

            await taskGroup.addTask() { self.tree_232c1195.classification(of: features, and: values) * 0.9819648359615734 }

            await taskGroup.addTask() { self.tree_bdc44123.classification(of: features, and: values) * 0.982379139801652 }

            await taskGroup.addTask() { self.tree_00438806.classification(of: features, and: values) * 0.9821978818716176 }

            await taskGroup.addTask() { self.tree_e87c7c17.classification(of: features, and: values) * 0.9827028146767135 }

            await taskGroup.addTask() { self.tree_f226af9c.classification(of: features, and: values) * 0.9822949843341361 }

            await taskGroup.addTask() { self.tree_e901e04c.classification(of: features, and: values) * 0.982715761671716 }

            await taskGroup.addTask() { self.tree_5bcbf7f8.classification(of: features, and: values) * 0.9824827157616717 }

            await taskGroup.addTask() { self.tree_632b165d.classification(of: features, and: values) * 0.9819907299515782 }

            await taskGroup.addTask() { self.tree_de2147ac.classification(of: features, and: values) * 0.9819324684740671 }


            var total: Double = 0.0
            await taskGroup.forEach() { total += $0 }
            return total / 12
        }
        return score
    }
}