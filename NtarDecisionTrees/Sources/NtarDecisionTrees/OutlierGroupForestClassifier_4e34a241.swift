/*
   written by decision_tree_generator on 2023-04-30 00:26:52 +0000.

   The classifications of 12 trees are combined here with weights from test data.
   
   Trees were computed to the maximum depth possible

   Trees were NOT pruned with test data

   tree(NtarCore.DecisionTreeParams(name: "9274b54f", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48865, negativeTrainingSize: 1085716, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "34f6b02d", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48865, negativeTrainingSize: 1085716, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "5c4a29d6", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48865, negativeTrainingSize: 1085716, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "1cd02963", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48865, negativeTrainingSize: 1085716, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "183eeef5", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085716, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "036c4330", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085716, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "563c3e5b", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085717, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "cac94eff", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085717, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "8e298a75", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085717, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "2e19467e", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085717, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "d7ae61cf", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085717, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "40370974", inputSequences: ["/qp/ntar_validated/02_29_2023-outlier-values-train", "/rp/ntar_validated/02_29_2023-outlier-values-train"], positiveTrainingSize: 48866, negativeTrainingSize: 1085717, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))


 */

import Foundation
import NtarCore

// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE

@available(macOS 10.15, *)
public final class OutlierGroupClassifierForest_4e34a241: NamedOutlierGroupClassifier {

    public init() { }

    public let name = "4e34a241"
    
    public let type: ClassifierType = .forest(DecisionForestParams(name: "4e34a241",
                                                                   treeCount: 12,
                                                                   treeNames: [ "9274b54f", "34f6b02d", "5c4a29d6", "1cd02963", "183eeef5", "036c4330", "563c3e5b", "cac94eff", "8e298a75", "2e19467e", "d7ae61cf", "40370974"]))

    let tree_9274b54f = OutlierGroupDecisionTree_9274b54f()
    let tree_34f6b02d = OutlierGroupDecisionTree_34f6b02d()
    let tree_5c4a29d6 = OutlierGroupDecisionTree_5c4a29d6()
    let tree_1cd02963 = OutlierGroupDecisionTree_1cd02963()
    let tree_183eeef5 = OutlierGroupDecisionTree_183eeef5()
    let tree_036c4330 = OutlierGroupDecisionTree_036c4330()
    let tree_563c3e5b = OutlierGroupDecisionTree_563c3e5b()
    let tree_cac94eff = OutlierGroupDecisionTree_cac94eff()
    let tree_8e298a75 = OutlierGroupDecisionTree_8e298a75()
    let tree_2e19467e = OutlierGroupDecisionTree_2e19467e()
    let tree_d7ae61cf = OutlierGroupDecisionTree_d7ae61cf()
    let tree_40370974 = OutlierGroupDecisionTree_40370974()

    // returns -1 for negative, +1 for positive
    public func classification(of group: OutlierGroup) async -> Double {
        let (size, width, height, centerX, centerY, minX, minY, maxX, maxY, hypotenuse, aspectRatio, fillAmount, surfaceAreaRatio, averagebrightness, medianBrightness, maxBrightness, avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection, longerHistogramStreakDetection, maxHoughTransformCount, maxHoughTheta, neighboringInterFrameOutlierThetaScore, maxOverlap, maxOverlapTimesThetaHisto) = await (group.decisionTreeValue(for: .size), group.decisionTreeValue(for: .width), group.decisionTreeValue(for: .height), group.decisionTreeValue(for: .centerX), group.decisionTreeValue(for: .centerY), group.decisionTreeValue(for: .minX), group.decisionTreeValue(for: .minY), group.decisionTreeValue(for: .maxX), group.decisionTreeValue(for: .maxY), group.decisionTreeValue(for: .hypotenuse), group.decisionTreeValue(for: .aspectRatio), group.decisionTreeValue(for: .fillAmount), group.decisionTreeValue(for: .surfaceAreaRatio), group.decisionTreeValue(for: .averagebrightness), group.decisionTreeValue(for: .medianBrightness), group.decisionTreeValue(for: .maxBrightness), group.decisionTreeValue(for: .avgCountOfFirst10HoughLines), group.decisionTreeValue(for: .maxThetaDiffOfFirst10HoughLines), group.decisionTreeValue(for: .maxRhoDiffOfFirst10HoughLines), group.decisionTreeValue(for: .avgCountOfAllHoughLines), group.decisionTreeValue(for: .maxThetaDiffOfAllHoughLines), group.decisionTreeValue(for: .maxRhoDiffOfAllHoughLines), group.decisionTreeValue(for: .numberOfNearbyOutliersInSameFrame), group.decisionTreeValue(for: .adjecentFrameNeighboringOutliersBestTheta), group.decisionTreeValue(for: .histogramStreakDetection), group.decisionTreeValue(for: .longerHistogramStreakDetection), group.decisionTreeValue(for: .maxHoughTransformCount), group.decisionTreeValue(for: .maxHoughTheta), group.decisionTreeValue(for: .neighboringInterFrameOutlierThetaScore), group.decisionTreeValue(for: .maxOverlap), group.decisionTreeValue(for: .maxOverlapTimesThetaHisto))
        let _9274b54f: Double = tree_9274b54f.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9761016045373019
        let _34f6b02d: Double = tree_34f6b02d.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9764894081147899
        let _5c4a29d6: Double = tree_5c4a29d6.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9764700179359155
        let _1cd02963: Double = tree_1cd02963.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9766833099035339
        let _183eeef5: Double = tree_183eeef5.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9765281884725386
        let _036c4330: Double = tree_036c4330.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.975578069707693
        let _563c3e5b: Double = tree_563c3e5b.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9765960540985991
        let _cac94eff: Double = tree_cac94eff.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9767996509767802
        let _8e298a75: Double = tree_8e298a75.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9761500799844879
        let _2e19467e: Double = tree_2e19467e.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9769062969605895
        let _d7ae61cf: Double = tree_d7ae61cf.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9759464831063066
        let _40370974: Double = tree_40370974.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9761985554316739

        return (_9274b54f+_34f6b02d+_5c4a29d6+_1cd02963+_183eeef5+_036c4330+_563c3e5b+_cac94eff+_8e298a75+_2e19467e+_d7ae61cf+_40370974)/12
    }

    // returns -1 for negative, +1 for positive
    public func classification (
       of features: [OutlierGroup.Feature],   // parallel
       and values: [Double]                   // arrays
    ) -> Double
    {
        let _9274b54f: Double = tree_9274b54f.classification(of: features, and: values) * 0.9761016045373019
        let _34f6b02d: Double = tree_34f6b02d.classification(of: features, and: values) * 0.9764894081147899
        let _5c4a29d6: Double = tree_5c4a29d6.classification(of: features, and: values) * 0.9764700179359155
        let _1cd02963: Double = tree_1cd02963.classification(of: features, and: values) * 0.9766833099035339
        let _183eeef5: Double = tree_183eeef5.classification(of: features, and: values) * 0.9765281884725386
        let _036c4330: Double = tree_036c4330.classification(of: features, and: values) * 0.975578069707693
        let _563c3e5b: Double = tree_563c3e5b.classification(of: features, and: values) * 0.9765960540985991
        let _cac94eff: Double = tree_cac94eff.classification(of: features, and: values) * 0.9767996509767802
        let _8e298a75: Double = tree_8e298a75.classification(of: features, and: values) * 0.9761500799844879
        let _2e19467e: Double = tree_2e19467e.classification(of: features, and: values) * 0.9769062969605895
        let _d7ae61cf: Double = tree_d7ae61cf.classification(of: features, and: values) * 0.9759464831063066
        let _40370974: Double = tree_40370974.classification(of: features, and: values) * 0.9761985554316739

        return (_9274b54f+_34f6b02d+_5c4a29d6+_1cd02963+_183eeef5+_036c4330+_563c3e5b+_cac94eff+_8e298a75+_2e19467e+_d7ae61cf+_40370974)/12
    }
}