/*
   written by decision_tree_generator on 2023-04-28 23:05:58 +0000.

   The classifications of 12 trees are combined here with weights from test data.
   
   Trees were computed to the maximum depth possible

   Trees were NOT pruned with test data

   tree(NtarCore.DecisionTreeParams(name: "5bd71116", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27098, negativeTrainingSize: 611295, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "f7c471da", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27098, negativeTrainingSize: 611295, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "7a298eae", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27098, negativeTrainingSize: 611295, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "bd4f13b3", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27098, negativeTrainingSize: 611295, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "2ca90a75", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27098, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "2872e43f", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27098, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "dcc5b289", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27099, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "d22e4259", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27099, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "cab9fb5b", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27099, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "0740583d", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27099, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "256ce091", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27099, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "42ff8a60", inputSequences: ["/qp/ntar_validated/04_28_2023-outlier-values-train", "/rp/ntar_validated/04_28_2023-outlier-values-train"], positiveTrainingSize: 27099, negativeTrainingSize: 611296, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))


 */

import Foundation
import NtarCore

// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE

@available(macOS 10.15, *)
public final class OutlierGroupClassifierForest_041b5dc1: NamedOutlierGroupClassifier {

    public init() { }

    public let name = "041b5dc1"
    
    public let type: ClassifierType = .forest(DecisionForestParams(name: "041b5dc1",
                                                                   treeCount: 12,
                                                                   treeNames: [ "5bd71116", "f7c471da", "7a298eae", "bd4f13b3", "2ca90a75", "2872e43f", "dcc5b289", "d22e4259", "cab9fb5b", "0740583d", "256ce091", "42ff8a60"]))

    let tree_5bd71116 = OutlierGroupDecisionTree_5bd71116()
    let tree_f7c471da = OutlierGroupDecisionTree_f7c471da()
    let tree_7a298eae = OutlierGroupDecisionTree_7a298eae()
    let tree_bd4f13b3 = OutlierGroupDecisionTree_bd4f13b3()
    let tree_2ca90a75 = OutlierGroupDecisionTree_2ca90a75()
    let tree_2872e43f = OutlierGroupDecisionTree_2872e43f()
    let tree_dcc5b289 = OutlierGroupDecisionTree_dcc5b289()
    let tree_d22e4259 = OutlierGroupDecisionTree_d22e4259()
    let tree_cab9fb5b = OutlierGroupDecisionTree_cab9fb5b()
    let tree_0740583d = OutlierGroupDecisionTree_0740583d()
    let tree_256ce091 = OutlierGroupDecisionTree_256ce091()
    let tree_42ff8a60 = OutlierGroupDecisionTree_42ff8a60()

    // returns -1 for negative, +1 for positive
    public func classification(of group: OutlierGroup) async -> Double {
        let size = await group.decisionTreeValue(for: .size)
        let width = await group.decisionTreeValue(for: .width)
        let height = await group.decisionTreeValue(for: .height)
        let centerX = await group.decisionTreeValue(for: .centerX)
        let centerY = await group.decisionTreeValue(for: .centerY)
        let minX = await group.decisionTreeValue(for: .minX)
        let minY = await group.decisionTreeValue(for: .minY)
        let maxX = await group.decisionTreeValue(for: .maxX)
        let maxY = await group.decisionTreeValue(for: .maxY)
        let hypotenuse = await group.decisionTreeValue(for: .hypotenuse)
        let aspectRatio = await group.decisionTreeValue(for: .aspectRatio)
        let fillAmount = await group.decisionTreeValue(for: .fillAmount)
        let surfaceAreaRatio = await group.decisionTreeValue(for: .surfaceAreaRatio)
        let averagebrightness = await group.decisionTreeValue(for: .averagebrightness)
        let medianBrightness = await group.decisionTreeValue(for: .medianBrightness)
        let maxBrightness = await group.decisionTreeValue(for: .maxBrightness)
        let avgCountOfFirst10HoughLines = await group.decisionTreeValue(for: .avgCountOfFirst10HoughLines)
        let maxThetaDiffOfFirst10HoughLines = await group.decisionTreeValue(for: .maxThetaDiffOfFirst10HoughLines)
        let maxRhoDiffOfFirst10HoughLines = await group.decisionTreeValue(for: .maxRhoDiffOfFirst10HoughLines)
        let avgCountOfAllHoughLines = await group.decisionTreeValue(for: .avgCountOfAllHoughLines)
        let maxThetaDiffOfAllHoughLines = await group.decisionTreeValue(for: .maxThetaDiffOfAllHoughLines)
        let maxRhoDiffOfAllHoughLines = await group.decisionTreeValue(for: .maxRhoDiffOfAllHoughLines)
        let numberOfNearbyOutliersInSameFrame = await group.decisionTreeValue(for: .numberOfNearbyOutliersInSameFrame)
        let adjecentFrameNeighboringOutliersBestTheta = await group.decisionTreeValue(for: .adjecentFrameNeighboringOutliersBestTheta)
        let histogramStreakDetection = await group.decisionTreeValue(for: .histogramStreakDetection)
        let longerHistogramStreakDetection = await group.decisionTreeValue(for: .longerHistogramStreakDetection)
        let maxHoughTransformCount = await group.decisionTreeValue(for: .maxHoughTransformCount)
        let maxHoughTheta = await group.decisionTreeValue(for: .maxHoughTheta)
        let neighboringInterFrameOutlierThetaScore = await group.decisionTreeValue(for: .neighboringInterFrameOutlierThetaScore)
        let maxOverlap = await group.decisionTreeValue(for: .maxOverlap)
        let maxOverlapTimesThetaHisto = await group.decisionTreeValue(for: .maxOverlapTimesThetaHisto)

        let _5bd71116 = tree_5bd71116.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9755156193462791
        let _f7c471da = tree_f7c471da.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9753950066336992
        let _7a298eae = tree_7a298eae.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9755328497337905
        let _bd4f13b3 = tree_bd4f13b3.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.975636232058859
        let _2ca90a75 = tree_2ca90a75.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9753088546961421
        let _2872e43f = tree_2872e43f.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9748608646208453
        let _dcc5b289 = tree_dcc5b289.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9753088546961421
        let _d22e4259 = tree_d22e4259.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.975429467408722
        let _cab9fb5b = tree_cab9fb5b.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9750159381084481
        let _0740583d = tree_0740583d.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9752399331460965
        let _256ce091 = tree_256ce091.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9750848596584937
        let _42ff8a60 = tree_42ff8a60.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9761531436842015

        return (_5bd71116+_f7c471da+_7a298eae+_bd4f13b3+_2ca90a75+_2872e43f+_dcc5b289+_d22e4259+_cab9fb5b+_0740583d+_256ce091+_42ff8a60)/12
    }

    // returns -1 for negative, +1 for positive
    public func classification (
       of features: [OutlierGroup.Feature],   // parallel
       and values: [Double]                   // arrays
    ) -> Double
    {
        let _5bd71116 = tree_5bd71116.classification(of: features, and: values) * 0.9755156193462791
        let _f7c471da = tree_f7c471da.classification(of: features, and: values) * 0.9753950066336992
        let _7a298eae = tree_7a298eae.classification(of: features, and: values) * 0.9755328497337905
        let _bd4f13b3 = tree_bd4f13b3.classification(of: features, and: values) * 0.975636232058859
        let _2ca90a75 = tree_2ca90a75.classification(of: features, and: values) * 0.9753088546961421
        let _2872e43f = tree_2872e43f.classification(of: features, and: values) * 0.9748608646208453
        let _dcc5b289 = tree_dcc5b289.classification(of: features, and: values) * 0.9753088546961421
        let _d22e4259 = tree_d22e4259.classification(of: features, and: values) * 0.975429467408722
        let _cab9fb5b = tree_cab9fb5b.classification(of: features, and: values) * 0.9750159381084481
        let _0740583d = tree_0740583d.classification(of: features, and: values) * 0.9752399331460965
        let _256ce091 = tree_256ce091.classification(of: features, and: values) * 0.9750848596584937
        let _42ff8a60 = tree_42ff8a60.classification(of: features, and: values) * 0.9761531436842015

        return (_5bd71116+_f7c471da+_7a298eae+_bd4f13b3+_2ca90a75+_2872e43f+_dcc5b289+_d22e4259+_cab9fb5b+_0740583d+_256ce091+_42ff8a60)/12
    }
}