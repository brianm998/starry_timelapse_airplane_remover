/*
   written by decision_tree_generator on 2023-04-17 17:24:13 +0000.

   The classifications of 11 trees are combined here with weights from test data.
   
   Trees were computed to the maximum depth possible

   Trees were NOT pruned with test data

   tree(NtarCore.DecisionTreeParams(name: "25f01420", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077365, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "453f7664", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077365, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "20f3a8b8", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077365, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "b7cb56ce", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077365, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "6970ce5d", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077365, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "cf1729d2", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077365, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "0980b7b0", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077366, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "d2a1f385", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077366, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "c03c24c1", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077366, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "96bf628f", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077366, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))

   tree(NtarCore.DecisionTreeParams(name: "cc7270e3", inputSequences: ["/qp/ntar_validated/04_16_2023-outlier-values", "/rp/ntar_validated/04_16_2023-outlier-values"], positiveTrainingSize: 128480, negativeTrainingSize: 1077366, decisionTypes: [NtarCore.OutlierGroup.Feature.size, NtarCore.OutlierGroup.Feature.width, NtarCore.OutlierGroup.Feature.height, NtarCore.OutlierGroup.Feature.centerX, NtarCore.OutlierGroup.Feature.centerY, NtarCore.OutlierGroup.Feature.minX, NtarCore.OutlierGroup.Feature.minY, NtarCore.OutlierGroup.Feature.maxX, NtarCore.OutlierGroup.Feature.maxY, NtarCore.OutlierGroup.Feature.hypotenuse, NtarCore.OutlierGroup.Feature.aspectRatio, NtarCore.OutlierGroup.Feature.fillAmount, NtarCore.OutlierGroup.Feature.surfaceAreaRatio, NtarCore.OutlierGroup.Feature.averagebrightness, NtarCore.OutlierGroup.Feature.medianBrightness, NtarCore.OutlierGroup.Feature.maxBrightness, NtarCore.OutlierGroup.Feature.avgCountOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfFirst10HoughLines, NtarCore.OutlierGroup.Feature.avgCountOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxThetaDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.maxRhoDiffOfAllHoughLines, NtarCore.OutlierGroup.Feature.numberOfNearbyOutliersInSameFrame, NtarCore.OutlierGroup.Feature.adjecentFrameNeighboringOutliersBestTheta, NtarCore.OutlierGroup.Feature.histogramStreakDetection, NtarCore.OutlierGroup.Feature.longerHistogramStreakDetection, NtarCore.OutlierGroup.Feature.maxHoughTransformCount, NtarCore.OutlierGroup.Feature.maxHoughTheta, NtarCore.OutlierGroup.Feature.neighboringInterFrameOutlierThetaScore, NtarCore.OutlierGroup.Feature.maxOverlap, NtarCore.OutlierGroup.Feature.maxOverlapTimesThetaHisto], decisionSplitTypes: [NtarCore.DecisionSplitType.median], maxDepth: Optional(-1), pruned: false))


 */

import Foundation
import NtarCore

// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE
// DO NOT EDIT THIS FILE

@available(macOS 10.15, *)
public final class OutlierGroupClassifierForest_c4f08149: NamedOutlierGroupClassifier {

    public init() { }

    public let name = "c4f08149"
    
    public let type: ClassifierType = .forest(DecisionForestParams(name: "c4f08149",
                                                                   treeCount: 11,
                                                                   treeNames: [ "25f01420", "453f7664", "20f3a8b8", "b7cb56ce", "6970ce5d", "cf1729d2", "0980b7b0", "d2a1f385", "c03c24c1", "96bf628f", "cc7270e3"]))

    let tree_25f01420 = OutlierGroupDecisionTree_25f01420()
    let tree_453f7664 = OutlierGroupDecisionTree_453f7664()
    let tree_20f3a8b8 = OutlierGroupDecisionTree_20f3a8b8()
    let tree_b7cb56ce = OutlierGroupDecisionTree_b7cb56ce()
    let tree_6970ce5d = OutlierGroupDecisionTree_6970ce5d()
    let tree_cf1729d2 = OutlierGroupDecisionTree_cf1729d2()
    let tree_0980b7b0 = OutlierGroupDecisionTree_0980b7b0()
    let tree_d2a1f385 = OutlierGroupDecisionTree_d2a1f385()
    let tree_c03c24c1 = OutlierGroupDecisionTree_c03c24c1()
    let tree_96bf628f = OutlierGroupDecisionTree_96bf628f()
    let tree_cc7270e3 = OutlierGroupDecisionTree_cc7270e3()

    // returns -1 for negative, +1 for positive
    public func classification(of group: OutlierGroup) async -> Double {
        let size = await group.decisionTreeValue(for: .size)
        let width = await group.decisionTreeValue(for: .width)
        let height = await group.decisionTreeValue(for: .height)
        let centerX = await group.decisionTreeValue(for: .centerX)
        let centerY = await group.decisionTreeValue(for: .centerY)
        let minX = await group.decisionTreeValue(for: .minX)
        let minY = await group.decisionTreeValue(for: .minY)
        let maxX = await group.decisionTreeValue(for: .maxX)
        let maxY = await group.decisionTreeValue(for: .maxY)
        let hypotenuse = await group.decisionTreeValue(for: .hypotenuse)
        let aspectRatio = await group.decisionTreeValue(for: .aspectRatio)
        let fillAmount = await group.decisionTreeValue(for: .fillAmount)
        let surfaceAreaRatio = await group.decisionTreeValue(for: .surfaceAreaRatio)
        let averagebrightness = await group.decisionTreeValue(for: .averagebrightness)
        let medianBrightness = await group.decisionTreeValue(for: .medianBrightness)
        let maxBrightness = await group.decisionTreeValue(for: .maxBrightness)
        let avgCountOfFirst10HoughLines = await group.decisionTreeValue(for: .avgCountOfFirst10HoughLines)
        let maxThetaDiffOfFirst10HoughLines = await group.decisionTreeValue(for: .maxThetaDiffOfFirst10HoughLines)
        let maxRhoDiffOfFirst10HoughLines = await group.decisionTreeValue(for: .maxRhoDiffOfFirst10HoughLines)
        let avgCountOfAllHoughLines = await group.decisionTreeValue(for: .avgCountOfAllHoughLines)
        let maxThetaDiffOfAllHoughLines = await group.decisionTreeValue(for: .maxThetaDiffOfAllHoughLines)
        let maxRhoDiffOfAllHoughLines = await group.decisionTreeValue(for: .maxRhoDiffOfAllHoughLines)
        let numberOfNearbyOutliersInSameFrame = await group.decisionTreeValue(for: .numberOfNearbyOutliersInSameFrame)
        let adjecentFrameNeighboringOutliersBestTheta = await group.decisionTreeValue(for: .adjecentFrameNeighboringOutliersBestTheta)
        let histogramStreakDetection = await group.decisionTreeValue(for: .histogramStreakDetection)
        let longerHistogramStreakDetection = await group.decisionTreeValue(for: .longerHistogramStreakDetection)
        let maxHoughTransformCount = await group.decisionTreeValue(for: .maxHoughTransformCount)
        let maxHoughTheta = await group.decisionTreeValue(for: .maxHoughTheta)
        let neighboringInterFrameOutlierThetaScore = await group.decisionTreeValue(for: .neighboringInterFrameOutlierThetaScore)
        let maxOverlap = await group.decisionTreeValue(for: .maxOverlap)
        let maxOverlapTimesThetaHisto = await group.decisionTreeValue(for: .maxOverlapTimesThetaHisto)

        let _25f01420: Double = tree_25f01420.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.900162539598295

        let _453f7664: Double = tree_453f7664.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9009918232630654

        let _20f3a8b8: Double = tree_20f3a8b8.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9007927951835205

        let _b7cb56ce: Double = tree_b7cb56ce.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9019952564974375

        let _6970ce5d: Double = tree_6970ce5d.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9027167332857877

        let _cf1729d2: Double = tree_cf1729d2.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.901282072545735

        let _0980b7b0: Double = tree_0980b7b0.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9002040037815335

        let _d2a1f385: Double = tree_d2a1f385.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9006518169605096

        let _c03c24c1: Double = tree_c03c24c1.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9008674307133498

        let _96bf628f: Double = tree_96bf628f.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9019206209676082

        let _cc7270e3: Double = tree_cc7270e3.classification(size: size, width: width, height: height, centerX: centerX, centerY: centerY, minX: minX, minY: minY, maxX: maxX, maxY: maxY, hypotenuse: hypotenuse, aspectRatio: aspectRatio, fillAmount: fillAmount, surfaceAreaRatio: surfaceAreaRatio, averagebrightness: averagebrightness, medianBrightness: medianBrightness, maxBrightness: maxBrightness, avgCountOfFirst10HoughLines: avgCountOfFirst10HoughLines, maxThetaDiffOfFirst10HoughLines: maxThetaDiffOfFirst10HoughLines, maxRhoDiffOfFirst10HoughLines: maxRhoDiffOfFirst10HoughLines, avgCountOfAllHoughLines: avgCountOfAllHoughLines, maxThetaDiffOfAllHoughLines: maxThetaDiffOfAllHoughLines, maxRhoDiffOfAllHoughLines: maxRhoDiffOfAllHoughLines, numberOfNearbyOutliersInSameFrame: numberOfNearbyOutliersInSameFrame, adjecentFrameNeighboringOutliersBestTheta: adjecentFrameNeighboringOutliersBestTheta, histogramStreakDetection: histogramStreakDetection, longerHistogramStreakDetection: longerHistogramStreakDetection, maxHoughTransformCount: maxHoughTransformCount, maxHoughTheta: maxHoughTheta, neighboringInterFrameOutlierThetaScore: neighboringInterFrameOutlierThetaScore, maxOverlap: maxOverlap, maxOverlapTimesThetaHisto: maxOverlapTimesThetaHisto) * 0.9006601097971572

        return (_25f01420+_453f7664+_20f3a8b8+_b7cb56ce+_6970ce5d+_cf1729d2+_0980b7b0+_d2a1f385+_c03c24c1+_96bf628f+_cc7270e3)/11
    }

    // returns -1 for negative, +1 for positive
    public func classification (
       of features: [OutlierGroup.Feature],   // parallel
       and values: [Double]                   // arrays
    ) -> Double
    {
        let _25f01420 = tree_25f01420.classification(of: features, and: values) * 0.900162539598295
        let _453f7664 = tree_453f7664.classification(of: features, and: values) * 0.9009918232630654
        let _20f3a8b8 = tree_20f3a8b8.classification(of: features, and: values) * 0.9007927951835205
        let _b7cb56ce = tree_b7cb56ce.classification(of: features, and: values) * 0.9019952564974375
        let _6970ce5d = tree_6970ce5d.classification(of: features, and: values) * 0.9027167332857877
        let _cf1729d2 = tree_cf1729d2.classification(of: features, and: values) * 0.901282072545735
        let _0980b7b0 = tree_0980b7b0.classification(of: features, and: values) * 0.9002040037815335
        let _d2a1f385 = tree_d2a1f385.classification(of: features, and: values) * 0.9006518169605096
        let _c03c24c1 = tree_c03c24c1.classification(of: features, and: values) * 0.9008674307133498
        let _96bf628f = tree_96bf628f.classification(of: features, and: values) * 0.9019206209676082
        let _cc7270e3 = tree_cc7270e3.classification(of: features, and: values) * 0.9006601097971572

        return (_25f01420+_453f7664+_20f3a8b8+_b7cb56ce+_6970ce5d+_cf1729d2+_0980b7b0+_d2a1f385+_c03c24c1+_96bf628f+_cc7270e3)/11
    }
}
